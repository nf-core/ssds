/*
========================================================================================
    nf-core/ssds Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 10    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    withName:SAMPLESHEET_CHECK {
        executor = 'local'
        time = { check_max( 0.25.hour * task.attempt , 'time' ) }
    }

    withName:FASTQC {
        time = { check_max( reads[0].size() < 5000000000 ? 0.5.hour : 0.5.hour + 1.hour * (reads[0].size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:TRIMGALORE {
        time = { check_max( reads[0].size() < 5000000000 ? 1.hour : 1.hour + 1.hour * (reads[0].size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:BWA_INDEX {
        time = { check_max( 2.h   * task.attempt, 'time' ) }
    }

    withName:BWA_MEM {
        time = { check_max( reads[0].size() < 2500000000 ? 4.hour : 4.hour + 4.hour * (reads[0].size()/2500000000) * task.attempt , 'time' ) }
    }

    withName:FILTER_SUPP_ALIGNMENTS {
        time = { check_max( bam.size() < 5000000000 ? 0.5.hour : 0.5.hour + 0.5.hour * (bam.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:PICARD_SORTSAM_QRY {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time = { check_max( bam.size() < 5000000000 ? 2.hour : 2.hour + 2.hour * (bam.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:PICARD_SORTSAM {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time = { check_max( bam.size() < 5000000000 ? 2.hour : 2.hour + 2.hour * (bam.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:PICARD_MARKDUPLICATES {
        time = { check_max( bam.size() < 5000000000 ? 1.hour : 1.hour + 1.hour * (bam.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:SAMTOOLS_INDEX {
        time = { check_max( bam.size() < 5000000000 ? 1.hour : 1.hour + 1.hour * (bam.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:PICARD_COLLECTMULTIPLEMETRICS {
        time = { check_max( bam.size() < 5000000000 ? 0.5.hour : 0.5.hour + 0.5.hour * (bam.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:PARSESSDS {
        time = { check_max( bam.size() < 1500000000 ? 2.hour : 2.hour + 2.hour * (bam.size()/1500000000) * task.attempt , 'time' ) }
    }

    withName:BEDTOOLS_SORT {
        time = { check_max( bed.size() < 2000000000 ? 0.5.hour : 0.5.hour + 0.5.hour * (bed.size()/2000000000) * task.attempt , 'time' ) }
    }

    withName:BEDTOOLS_MAKEWINDOWS  {
        time = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    withName:GENERATE_SSDS_COVERAGE {
        time = { check_max( bed.size() < 30000000 ? 2.hour : 2.hour + 1.hour * (bed.size()/30000000) * task.attempt , 'time' ) }
    }

    withName:UCSC_BEDGRAPHTOBIGWIG {
        time = { check_max( bedgraph.size() < 5000000000 ? 0.5.hour : 0.5.hour + 1.hour * (bedgraph.size()/5000000000) * task.attempt , 'time' ) }
    }

    withName:SAMTOOLS_IDXSTATS  {
        time = { check_max( 1.h   * task.attempt, 'time'  ) }
    }

    withName:CALCULATESPOT {
        time = { check_max( bam.size() < 1000000000 ? 3.hour : 3.hour + 3.hour * (reads[0].size()/1000000000) * task.attempt , 'time' ) }
    }

    withName:DEEPTOOLS_PLOTFINGERPRINT {
        time = { check_max( 4.h   * task.attempt, 'time'  ) }
    }

    withName:MULTIQC {
        time = { check_max( 4.h   * task.attempt, 'time'  ) }
        memory = '24GB'
    }
}
